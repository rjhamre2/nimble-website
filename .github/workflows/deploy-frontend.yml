name: Deploy Frontend

on:
  push:
    branches: ["prod"]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Code
        uses: actions/checkout@v4

      # --- 1. Continuous Integration (CI) / Build Phase ---

      - name: üõ†Ô∏è Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üèóÔ∏è Build Static Assets
        # IMPORTANT: This sets the environment variable BUILD_DIR for subsequent steps
        run: npm run build
        env:
          CI: false
          BUILD_DIR: build # The folder containing the final static files

      # --- 2. Continuous Delivery (CD) to AWS ---

      - name: üîê Configure AWS Credentials
        # This action uses OIDC authentication (id-token: write)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_FRONTEND_DEPLOY_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: üöÄ Deploy to S3 (Sync build files)
        # Uses jakejarvis/s3-sync-action to upload, delete old files, and set cache headers
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --follow-symlinks --delete --cache-control max-age=86400
        env:
          # Configuration for the S3 sync action
          AWS_S3_BUCKET: ${{ vars.S3_BUCKET_NAME }}
          SOURCE_DIR: ${{ env.BUILD_DIR }}

      - name: üí® Invalidate CloudFront Cache
        # Uses chetan/invalidate-cloudfront-action to ensure the new files are served immediately
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          # Configuration for the CloudFront action
          DISTRIBUTION: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: '/*' # Invalidate all paths for a clean update
          AWS_REGION: ${{ vars.AWS_REGION }}